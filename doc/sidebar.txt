*sidebar.txt*       The missing sidebar manager for Vim and Neovim
*sidebar* *vim-sidebar-manager*

==============================================================================
Contents~

1. Introduction                                         |sidebar-introduction|
  1.1 Motivation                                          |sidebar-motivation|
2. Examples                                                 |sidebar-examples|
3. Options                                                   |sidebar-options|
4. Sidebar Properties                                     |sidebar-properties|
5. Commands                                                 |sidebar-commands|
6. Functions                                               |sidebar-functions|
7. Credits                                                   |sidebar-credits|

==============================================================================

1. Introduction                                         *sidebar-introduction*

|vim-sidebar-manger| is a plugin for managing "sidebar" windows in Vim and
Neovim, in order to mimic an IDE-like UI layout.

1.1 Motivation

We have a lot of plugins who open windows at your editor's side. I would call
them "sidebars". Unfortunately, those plugins do no cooperate with each other.
For example, if you have NERDTree and Tagbar installed, and configured to open
at the same side, they can open simultaneously, and you have to control each
of them individually. I think a better approach would be to "switch" them.
That is, when you switch to NERDTree, Tagbar is closed automatically, and when
you switch to Tagbar, NERDTree is closed automatically. As a result, it gives
you a feeling that there is always a bar at a side, where there are several
pages that can be switched back and forth. That's pretty much like a typical
UI layout of an IDE. What's more, I want to use the same key for switching and
toggling. I wrote a lot of code to implement this behavior in the past years,
and finally noticed that an abstraction layer can be made, and that's this
plugin.

==============================================================================

2. Examples                                                 *sidebar-examples*

Please checkout https://github.com/brglng/vim-sidebar-manager/wiki/Examples
for examples.

==============================================================================

3. Options                                                   *sidebar-options*

g:sidebar                                                          *g:sidebar*

    The list of sidebars to register. This variable must be a |dict|, whose key
    is the name of the sidebar, and value is a |dict| of the properties of the
    sidebar. Please see |sidebar-properties| for available properties.

    Default: {}

                                  *g:sidebar_close_tab_on_closing_last_buffer*

g:sidebar_close_tab_on_closing_last_buffer

    Whether or not to close the tab page when closing the last window that is
    not a sidebar.

    Default: 0

g:sidebar_left_width                                    *g:sidebar_left_width*

    The default width of the sidebar on the left side. Must be a |Number| or
    |Float|. If the value is less than 1, it is treated as a percentage.

    Default: 40

g:sidebar_right_width                                  *g:sidebar_right_width*

    The default width of the sidebar on the right side. Must be a |Number| or
    |Float|. If the value is less than 1, it is treated as a percentage.

    Default: 40

g:sidebar_top_height                                    *g:sidebar_top_height*

    The default height of the sidebar on the top side. Must be a |Number| or
    |Float|. If the value is less than 1, it is treated as a percentage.

    Default: 0.4

g:sidebar_bottom_height                              *g:sidebar_bottom_height*

    The default height of the sidebar on the bottom side. Must be a |Number| or
    |Float|. If the value is less than 1, it is treated as a percentage.

    Default: 0.4

g:sidebar_move                                                *g:sidebar_move*

    Whether or not to move the sidebar window to its corresponding side when
    opening the sidebar.

    Default: 1

g:sidebar_opts                                                *g:sidebar_opts*

    A |dict| of local options to be set when opening the sidebar.

    Default:

    let g:sidebar_opts = {
    \   'winfixwidth': 0,
    \   'winfixheight': 0,
    \   'winhighlight': 'Normal:NormalFloat',
    \   'number': 0,
    \   'foldcolumn': 0,
    \   'signcolumn': 'no',
    \   'colorcolumn': 0,
    \   'bufhidden': 'hide',
    \   'buflisted': 0,
    \ }

==============================================================================

4. Sidebar Properties                                     *sidebar-properties*

position                                           *sidebar-property-position*

    The position of the sidebar. Must be a |string|. Available choices are
    `'left'`, `'bottom'`, `'top'` and `'right'`.

    NOTE: |vim-sidebar-manager| does not actually move your window or change
    your window's size. If you want to, e.g., place the |Tagbar| in the right,
    you must adjust the options of the |Tagbar| plugin.

filter                                               *sidebar-property-filter*

    A |Funcref| who takes the window number (|winnr|) as an argument, and returns
    a |Number| to indicate whether or not the window corresponding to the window
    number is the sidebar window of this kind. This property is optional if
    the get_win property is present.

check_win                                         *sidebar-property-check_win*

    Same as |sidebar-property-filter|. This property is deprecated.

get_win                                             *sidebar-property-get_win*

    A |Funcref| or |string| expression returning the window number (|winnr|) of the
    sidebar. This property is optional if the `filter` property is present. If
    both `filter` and `get_win` are present, `get_win` will take precedence.

dont_close                                       *sidebar-property-dont_close*

    A |string| or |list| of |string|s, where each item is a pattern, against whom to
    be matched the name of open sidebar windows. The matched windows won't be
    closed before switching to this sidebar window. This property is useful
    when a plugin already provides page-like switching.

    Example:

    It is not necessary to close the neo-tree.nvim window when switching
    between its "Files" and "Symbols" pages. This can be achieved with this
    property:
>vim
    let g:sidebars = {
    \   'neo-tree-filesystem': {
    \       'position': 'left',
    \       'check_win': {nr ->
    \           getwinvar(nr, '&filetype') ==# 'neo-tree' &&
    \           winbufnr(nr)->getbufvar('neo_tree_source') ==# 'filesystem'
    \       },
    \       'open': 'Neotree filesystem reveal',
    \       'close': 'Neotree close',
    \       'dont_close': 'neo-tree-.*'
    \   },
    \   'neo-tree-document-symbols': {
    \       'position': 'left',
    \       'check_win': {nr ->
    \           getwinvar(nr, '&filetype') ==# 'neo-tree' &&
    \           winbufnr(nr)->getbufvar('neo_tree_source') ==# 'document_symbols'
    \       },
    \       'open': 'Neotree document_symbols reveal',
    \       'close': 'Neotree close',
    \       'dont_close': 'neo-tree-.*'
    \   }
    \ }
<
open                                                   *sidebar-property-open*

    A |string| of Ex command or a |Funcref| to open the sidebar.

close                                                 *sidebar-property-close*

    A |string| of Ex command or a |Funcref| to close the sidebar.

width                                                 *sidebar-property-width*

    The width of the sidebar. Must be a |Number|, |Float| or |Funcref|. If the
    value is less than 1, it is treated as a percentage. If omitted, the value
    of |g:sidebar_left_width| or |g:sidebar_right_width| is used according to
    the position.

height                                               *sidebar-property-height*

    The height of the sidebar. Must be a |Number|, |Float| or |Funcref|. If the
    value is less than 1, it is treated as a percentage. If omitted, the value
    of |g:sidebar_top_height| or |g:sidebar_bottom_height| is used according
    to the position.

move                                                   *sidebar-property-move*

    Whether or not to move the sidebar window to its corresponding side when
    opening the sidebar. If omitted, the value of |g:sidebar_move| is used.

opts                                                   *sidebar-property-opts*

    A |dict| of local options to be set when opening the sidebar. If omitted,
    the value of |g:sidebar_opts| is used.

==============================================================================

5. Commands                                                 *sidebar-commands*

SidebarSwitch {name}                                           *SidebarSwitch*

    Switch to the sidebar of the specified name. If the sidebar is already
    open, the cursor will jump to the sidebar's window. If the sidebar is not
    open, it will be opened. If there is another kind of sidebar open at the
    same side, it will be closed.

SidebarOpen {name}                                               *SidebarOpen*

    Same as |SidebarSwitch|.

SidebarClose {name}                                             *SidebarClose*

    Close the sidebar of the specified name if it is open.

SidebarToggle {name}                                           *SidebarToggle*

    Toggle the sidebar of the specified name. If the sidebar is already open,
    it will be closed. If it is not open, it will be opened. If there is
    another kind of sidebar open at same side, it will be closed.

SidebarCloseSide {position}                                 *SidebarCloseSide*

    Close the sidebar at {position}. The {position} can be `'left'`, `'bottom'`,
    `'top'` or `'right'`.

SidebarCloseAll                                              *SidebarCloseAll*

    Close all sidebars.

==============================================================================

6. Functions                                               *sidebar-functions*

sidebar#register({desc})                                  *sidebar#register()*

    Register a sidebar. The argument {desc} must be a |dict|, with the name of
    the sidebar as the `'name'` key, and all the properties of the sidebar.
    This function is automatically called on startup for each sidebar defined
    in |g:sidebar|.

sidebar#get(...)                                               *sidebar#get()*

    If a parameter is given, return the properties of the sidebar of the given
    name. If no parameter is given, return a list of the properties of all
    registered sidebars.

sidebar#switch({name})                                      *sidebar#switch()*

    Switch to the sidebar of the specified name. If the sidebar is already
    open, the cursor will jump to the sidebar's window. If the sidebar is not
    open, it will be opened. If there is another kind of sidebar open at the
    same side, it will be closed.

sidebar#open({name})                                          *sidebar#open()*

    Same as |sidebar#switch()|.

sidebar#close({name})                                        *sidebar#close()*

    Close the sidebar of the specified name if it is open.

sidebar#toggle({name})                                      *sidebar#toggle()*

    Toggle the sidebar of the specified name. If the sidebar is already open,
    it will be closed. If it is not open, it will be opened. If there is
    another kind of sidebar open at same side, it will be closed.

sidebar#close_side({position})                          *sidebar#close_side()*

    Close the sidebar at {position}. The {position} can be `'left'`, `'bottom'`,
    `'top'` or `'right'`.

sidebar#close_side_except({position}, {name})    *sidebar#close_side_except()*

    Close all sidebar windows at {position}, execept the one named {name}.
    This function can be useful when overriding some built-in key mappings.

    e.g., The following script remaps the gO command in help windows.
    >vim
    autocmd BufWinEnter * if &l:buftype ==# 'help' |
    \ execute "nnoremap <buffer> <silent> gO :call sidebar#close_side_except('bottom', 'loclist')<CR>" . maparg('gO', 'n') |
    \ endif

sidebar#close_all()                                      *sidebar#close_all()*

    Close all sidebars.

sidebar#is_sidebar({nr})                                *sidebar#is_sidebar()*

    Return 1 if the window number {nr} is a sidebar window, otherwise 0.

sidebar#get_current_sidebar()                  *sidebar#get_current_sidebar()*

    Return a list, where the first element is the window number of the current
    sidebar window, and the second element is the property dictionary of the
    sidebar. If the current window is not a sidebar window, [0, {}] is
    returned.

sidebar#setup_current_sidebar_window()
                                      *sidebar#setup_current_sidebar_window()*

    This function does the following:
    1. Move the current sidebar window to its corresponding side.
    2. Set the width or height of the sidebar window.
    3. Set the local options of the sidebar window.
    4. Define key mappings for the sidebar window.

sidebar#close_tab_on_closing_last_buffer()
                                  *sidebar#close_tab_on_closing_last_buffer()*

    Close the tab page when closing the last window that is not a sidebar.

sidebar#open_last_help()                            *sidebar#open_last_help()*
                             
    Open the last help window. This function is useful when you want to open
    the last help window when toggling the help window as a sidebar. To use it,
    specify this function as |sidebar-property-open| of the help sidebar.

==============================================================================

7. Credits                                                   *sidebar-credits*

If you like this plugin, check out the GitHub for more information at
https://github.com/brglng/vim-sidebar-manager

==============================================================================
vim:tw=78:ts=8:et:ft=help:norl:
